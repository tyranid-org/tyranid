/**
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Generated by `tyranid-tdgen@0.5.39`: https://github.com/tyranid-org/tyranid-tdgen
 * date: Fri Feb 14 2020 23:18:13 GMT-0600 (CST)
 */
  

import 'tyranid/isomorphic';

declare module 'tyranid/isomorphic' {

  export namespace Tyr {


    
    /**
     * Base interface from which documents in collection
     * "mediaType" <MediaTypeCollection> are derived
     */
    export interface BaseMediaType<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      extensions?: string[];
      name?: string;
      notes?: string;
      /**
       * This is an obsolete media type and this values contains the new value to use.       */
      obsolete?: string;
      /**
       * This file is not safe to download as a link       */
      unsafe?: boolean;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrExchangeRate" <TyrExchangeRateCollection> are derived
     */
    export interface BaseTyrExchangeRate<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      rates?: any;
      updatedOn?: any;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrInstance" <TyrInstanceCollection> are derived
     */
    export interface BaseTyrInstance<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      lastAliveOn?: Date;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrLog" <TyrLogCollection> are derived
     */
    export interface BaseTyrLog<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      c?: string;
      du?: number;
      e?: TyrLogEventId;
      e$?: ObjContainer & BaseTyrLogEvent<ObjIdType, ObjContainer, NumContainer>;
      hn?: string;
      i?: string;
      i$?: ObjContainer & BaseTyrInstance<ObjIdType, ObjContainer, NumContainer>;
      l?: TyrLogLevelId;
      l$?: ObjContainer & BaseTyrLogLevel<ObjIdType, ObjContainer, NumContainer>;
      m?: string;
      on?: Date;
      q?: any;
      r?: {
        ip?: string;
        m?: string;
        p?: string;
        q?: any;
        sc?: number;
        sid?: string;
        ua?: ObjIdType;
        ua$?: ObjContainer & BaseTyrUserAgent<ObjIdType, ObjContainer, NumContainer>;
      };
      st?: string;
      upd?: any;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrLogEvent" <TyrLogEventCollection> are derived
     */
    export interface BaseTyrLogEvent<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      label?: string;
      notes?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrLogLevel" <TyrLogLevelCollection> are derived
     */
    export interface BaseTyrLogLevel<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      code?: string;
      /**
       * The console.X() method to use when logging to the console.       */
      method?: string;
      name?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrMarkupType" <TyrMarkupTypeCollection> are derived
     */
    export interface BaseTyrMarkupType<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      name?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrMigrationStatus" <TyrMigrationStatusCollection> are derived
     */
    export interface BaseTyrMigrationStatus<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      appliedOn?: Date;
      uuid?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrPage" <TyrPageCollection> are derived
     */
    export interface BaseTyrPage<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      content?: { type: Tyr.TyrMarkupTypeId, content: string };
      fragment?: boolean;
      path?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrSchema" <TyrSchemaCollection> are derived
     */
    export interface BaseTyrSchema<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      collection?: string;
      def?: any;
      match?: any;
      src?: string;
      type?: TyrSchemaTypeId;
      type$?: ObjContainer & BaseTyrSchemaType<ObjIdType, ObjContainer, NumContainer>;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrSchemaType" <TyrSchemaTypeCollection> are derived
     */
    export interface BaseTyrSchemaType<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      name?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrSubscription" <TyrSubscriptionCollection> are derived
     */
    export interface BaseTyrSubscription<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      c?: string;
      i?: string;
      on?: Date;
      /**
       * Stringified MongoDB query.       */
      q?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrTableConfig" <TyrTableConfigCollection> are derived
     */
    export interface BaseTyrTableConfig<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      collectionId?: string;
      documentUid?: string;
      fields: {
        hidden?: boolean;
        name: string;
        width?: number;
      }[];
      key?: string;
      pageSize?: number;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrUserAgent" <TyrUserAgentCollection> are derived
     */
    export interface BaseTyrUserAgent<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      ua?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "unit" <UnitCollection> are derived
     */
    export interface BaseUnit<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      abbreviation?: string;
      baseAdditive?: number;
      baseMultiplier?: number;
      factor?: string;
      formula?: string;
      name?: string;
      note?: string;
      /**
       * a unique id like _id, used when integers cannot be used       */
      sid?: string;
      system?: UnitSystemId;
      system$?: ObjContainer & BaseUnitSystem<ObjIdType, ObjContainer, NumContainer>;
      type?: UnitTypeId;
      type$?: ObjContainer & BaseUnitType<ObjIdType, ObjContainer, NumContainer>;
    }
    
    /**
     * Base interface from which documents in collection
     * "unitFactor" <UnitFactorCollection> are derived
     */
    export interface BaseUnitFactor<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      factor?: number;
      prefix?: string;
      symbol?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "unitSystem" <UnitSystemCollection> are derived
     */
    export interface BaseUnitSystem<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      name?: string;
      url?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "unitType" <UnitTypeCollection> are derived
     */
    export interface BaseUnitType<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
      abbreviation?: string;
      formula?: string;
      name?: string;
      normal?: string;
      note?: string;
    }
    
    
    /**
     * Document returned by collection "mediaType" <MediaTypeCollection>
     */
    export interface MediaType<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<MediaTypeId>,
              BaseMediaType<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrExchangeRate" <TyrExchangeRateCollection>
     */
    export interface TyrExchangeRate<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<string>,
              BaseTyrExchangeRate<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrInstance" <TyrInstanceCollection>
     */
    export interface TyrInstance<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<string>,
              BaseTyrInstance<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrLog" <TyrLogCollection>
     */
    export interface TyrLog<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<ObjIdType>,
              BaseTyrLog<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrLogEvent" <TyrLogEventCollection>
     */
    export interface TyrLogEvent<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<TyrLogEventId>,
              BaseTyrLogEvent<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrLogLevel" <TyrLogLevelCollection>
     */
    export interface TyrLogLevel<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<TyrLogLevelId>,
              BaseTyrLogLevel<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrMarkupType" <TyrMarkupTypeCollection>
     */
    export interface TyrMarkupType<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<TyrMarkupTypeId>,
              BaseTyrMarkupType<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrMigrationStatus" <TyrMigrationStatusCollection>
     */
    export interface TyrMigrationStatus<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<string>,
              BaseTyrMigrationStatus<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrPage" <TyrPageCollection>
     */
    export interface TyrPage<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<ObjIdType>,
              BaseTyrPage<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrSchema" <TyrSchemaCollection>
     */
    export interface TyrSchema<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<ObjIdType>,
              BaseTyrSchema<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrSchemaType" <TyrSchemaTypeCollection>
     */
    export interface TyrSchemaType<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<TyrSchemaTypeId>,
              BaseTyrSchemaType<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrSubscription" <TyrSubscriptionCollection>
     */
    export interface TyrSubscription<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<ObjIdType>,
              BaseTyrSubscription<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrTableConfig" <TyrTableConfigCollection>
     */
    export interface TyrTableConfig<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<ObjIdType>,
              BaseTyrTableConfig<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "tyrUserAgent" <TyrUserAgentCollection>
     */
    export interface TyrUserAgent<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<ObjIdType>,
              BaseTyrUserAgent<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "unit" <UnitCollection>
     */
    export interface Unit<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<UnitId>,
              BaseUnit<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "unitFactor" <UnitFactorCollection>
     */
    export interface UnitFactor<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<UnitFactorId>,
              BaseUnitFactor<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "unitSystem" <UnitSystemCollection>
     */
    export interface UnitSystem<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<UnitSystemId>,
              BaseUnitSystem<ObjIdType, ObjContainer, NumContainer> {}
    /**
     * Document returned by collection "unitType" <UnitTypeCollection>
     */
    export interface UnitType<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends Inserted<UnitTypeId>,
              BaseUnitType<ObjIdType, ObjContainer, NumContainer> {}
    
    /**
     * Type definition for "mediaType" collection
     */
    export interface MediaTypeCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<MediaType<ObjIdType, ObjContainer, NumContainer>>,
              MediaTypeCollectionEnumStatic {}
    
    /**
     * Type definition for "tyrExchangeRate" collection
     */
    export interface TyrExchangeRateCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrExchangeRate<ObjIdType, ObjContainer, NumContainer>> {}
    
    /**
     * Type definition for "tyrInstance" collection
     */
    export interface TyrInstanceCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrInstance<ObjIdType, ObjContainer, NumContainer>> {}
    
    /**
     * Type definition for "tyrLog" collection
     */
    export interface TyrLogCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrLog<ObjIdType, ObjContainer, NumContainer>> {}
    
    /**
     * Type definition for "tyrLogEvent" collection
     */
    export interface TyrLogEventCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrLogEvent<ObjIdType, ObjContainer, NumContainer>>,
              TyrLogEventCollectionEnumStatic {}
    
    /**
     * Type definition for "tyrLogLevel" collection
     */
    export interface TyrLogLevelCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrLogLevel<ObjIdType, ObjContainer, NumContainer>>,
              TyrLogLevelCollectionEnumStatic {}
    
    /**
     * Type definition for "tyrMarkupType" collection
     */
    export interface TyrMarkupTypeCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrMarkupType<ObjIdType, ObjContainer, NumContainer>>,
              TyrMarkupTypeCollectionEnumStatic {}
    
    /**
     * Type definition for "tyrMigrationStatus" collection
     */
    export interface TyrMigrationStatusCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrMigrationStatus<ObjIdType, ObjContainer, NumContainer>> {}
    
    /**
     * Type definition for "tyrPage" collection
     */
    export interface TyrPageCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrPage<ObjIdType, ObjContainer, NumContainer>> {}
    
    /**
     * Type definition for "tyrSchema" collection
     */
    export interface TyrSchemaCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrSchema<ObjIdType, ObjContainer, NumContainer>> {}
    
    /**
     * Type definition for "tyrSchemaType" collection
     */
    export interface TyrSchemaTypeCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrSchemaType<ObjIdType, ObjContainer, NumContainer>>,
              TyrSchemaTypeCollectionEnumStatic {}
    
    /**
     * Type definition for "tyrSubscription" collection
     */
    export interface TyrSubscriptionCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrSubscription<ObjIdType, ObjContainer, NumContainer>> {}
    
    /**
     * Type definition for "tyrTableConfig" collection
     */
    export interface TyrTableConfigCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrTableConfig<ObjIdType, ObjContainer, NumContainer>> {}
    
    /**
     * Type definition for "tyrUserAgent" collection
     */
    export interface TyrUserAgentCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<TyrUserAgent<ObjIdType, ObjContainer, NumContainer>> {}
    
    /**
     * Type definition for "unit" collection
     */
    export interface UnitCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<Unit<ObjIdType, ObjContainer, NumContainer>>,
              UnitCollectionEnumStatic {}
    
    /**
     * Type definition for "unitFactor" collection
     */
    export interface UnitFactorCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<UnitFactor<ObjIdType, ObjContainer, NumContainer>>,
              UnitFactorCollectionEnumStatic {}
    
    /**
     * Type definition for "unitSystem" collection
     */
    export interface UnitSystemCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<UnitSystem<ObjIdType, ObjContainer, NumContainer>>,
              UnitSystemCollectionEnumStatic {}
    
    /**
     * Type definition for "unitType" collection
     */
    export interface UnitTypeCollection<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>>
      extends CollectionInstance<UnitType<ObjIdType, ObjContainer, NumContainer>>,
              UnitTypeCollectionEnumStatic {}
    
    
  /**
   * Static properties for enum collection "MediaTypeCollection"
   */
  export interface MediaTypeCollectionEnumStatic<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
    
      "3_GPP_AUDIO_VIDEO_CONTAINER_IF_IT_DOES_NOT_CONTAIN_VIDEO": {
        _id: 'audio/3gpp';
        extensions: any;
        name: '3GPP audio/video container; if it does not contain video';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      "3_GPP_2_AUDIO_VIDEO_CONTAINER_IF_IT_CONTAINS_VIDEO": {
        _id: 'video/3gpp2';
        extensions: any;
        name: '3GPP2 audio/video container; if it contains video';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      "3_GPP_2_AUDIO_VIDEO_CONTAINER_IF_IT_DOES_NOT_CONTAIN_VIDEO": {
        _id: 'audio/3gpp2';
        extensions: any;
        name: '3GPP2 audio/video container; if it does not contain video';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      "3_GPP_IF_IT_CONTAINS_VIDEO": {
        _id: 'video/3gpp';
        extensions: any;
        name: '3GPP; if it contains video';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      "7_ZIP_ARCHIVE": {
        _id: 'application/x-7z-compressed';
        extensions: any;
        name: '7-zip archive';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      AAC_AUDIO: {
        _id: 'audio/aac';
        extensions: any;
        name: 'AAC audio';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      AVI_AUDIO_VIDEO_INTERLEAVE: {
        _id: 'video/avi';
        extensions: any;
        name: 'AVI: Audio Video Interleave';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      AVI_AUDIO_VIDEO_INTERLEAVE: {
        _id: 'video/msvideo';
        extensions: any;
        name: 'AVI: Audio Video Interleave';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      AVI_AUDIO_VIDEO_INTERLEAVE: {
        _id: 'video/x-msvideo';
        extensions: any;
        name: 'AVI: Audio Video Interleave';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ABI_WORD_DOCUMENT: {
        _id: 'application/x-abiword';
        extensions: any;
        name: 'AbiWord document';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ADOBE_PORTABLE_DOCUMENT_FORMAT_PDF: {
        _id: 'application/pdf';
        extensions: any;
        name: 'Adobe Portable Document Format (PDF)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      AMAZON_KINDLE_E_BOOK_FORMAT: {
        _id: 'application/vnd.amazon.ebook';
        extensions: any;
        name: 'Amazon Kindle eBook format';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      APPLE_INSTALLER_PACKAGE: {
        _id: 'application/vnd.apple.installer+xml';
        extensions: any;
        name: 'Apple Installer Package';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      APPLE_QUICK_TIME: {
        _id: 'video/quicktime';
        extensions: any;
        name: 'Apple QuickTime';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      APPLE_I_WORK_KEYNOTE: {
        _id: 'application/x-iwork-keynote-sffkey';
        extensions: any;
        name: 'Apple iWork Keynote';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      APPLE_I_WORK_NUMBERS: {
        _id: 'application/x-iwork-numbers-sffnumbers';
        extensions: any;
        name: 'Apple iWork Numbers';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      APPLE_I_WORK_PAGES: {
        _id: 'application/x-iwork-pages-sffpages';
        extensions: any;
        name: 'Apple iWork Pages';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ARCHIVE_DOCUMENT_MULTIPLE_FILES_EMBEDDED: {
        _id: 'application/x-freearc';
        extensions: any;
        name: 'Archive document (multiple files embedded)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      B_ZIP_ARCHIVE: {
        _id: 'application/x-bzip';
        extensions: any;
        name: 'BZip archive';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      B_ZIP_2_ARCHIVE: {
        _id: 'application/x-bzip2';
        extensions: any;
        name: 'BZip2 archive';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      BOURNE_SHELL_SCRIPT: {
        _id: 'application/x-sh';
        extensions: any;
        name: 'Bourne shell script';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      C_SHELL_SCRIPT: {
        _id: 'application/x-csh';
        extensions: any;
        name: 'C-Shell script';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      CASCADING_STYLE_SHEETS_CSS: {
        _id: 'text/css';
        extensions: any;
        name: 'Cascading Style Sheets (CSS)';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      COMMA_SEPARATED_VALUES_CSV: {
        _id: 'text/csv';
        extensions: any;
        name: 'Comma-separated values (CSV)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ECMA_SCRIPT: {
        _id: 'text/ecmascript';
        extensions: any;
        name: 'EcmaScript';
        obsolete: 'application/ecmascript';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ECMA_SCRIPT_MODULE: {
        _id: 'application/ecmascript';
        extensions: any;
        name: 'EcmaScript module';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ELECTRONIC_PUBLICATION_EPUB: {
        _id: 'application/epub+zip';
        extensions: any;
        name: 'Electronic publication (EPUB)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      GRAPHICS_INTERCHANGE_FORMAT_GIF: {
        _id: 'image/gif';
        extensions: any;
        name: 'Graphics Interchange Format (GIF)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      HYPER_TEXT_MARKUP_LANGUAGE_HTML: {
        _id: 'text/html';
        extensions: any;
        name: 'HyperText Markup Language (HTML)';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ICON_FORMAT: {
        _id: 'image/vnd.microsoft.icon';
        extensions: any;
        name: 'Icon format';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ICON_FORMAT: {
        _id: 'image/x-icon';
        extensions: any;
        name: 'Icon format';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      JPEG_IMAGES: {
        _id: 'image/jpeg';
        extensions: any;
        name: 'JPEG images';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      JSON_FORMAT: {
        _id: 'application/json';
        extensions: any;
        name: 'JSON format';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      JAVA_ARCHIVE_JAR: {
        _id: 'application/java-archive';
        extensions: any;
        name: 'Java Archive (JAR)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      JAVA_SCRIPT: {
        _id: 'application/x-javascript';
        extensions: any;
        name: 'JavaScript';
        obsolete: 'application/javascript';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      JAVA_SCRIPT: {
        _id: 'text/javascript';
        extensions: any;
        name: 'JavaScript';
        obsolete: 'application/javascript';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      JAVA_SCRIPT_JAVA_SCRIPT_MODULE: {
        _id: 'application/javascript';
        extensions: any;
        name: 'JavaScript, JavaScript module';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MP_3_AUDIO: {
        _id: 'audio/mpeg';
        extensions: any;
        name: 'MP3 audio';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MP_3_AUDIO: {
        _id: 'audio/mpeg3';
        extensions: any;
        name: 'MP3 audio';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MP_3_AUDIO: {
        _id: 'audio/x-mpeg-3';
        extensions: any;
        name: 'MP3 audio';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MP_4_VIDEO: {
        _id: 'video/mp4';
        extensions: any;
        name: 'MP4 Video';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MPEG_4: {
        _id: 'application/mp4';
        extensions: any;
        name: 'MPEG 4';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MPEG_VIDEO: {
        _id: 'video/mpeg';
        extensions: any;
        name: 'MPEG Video';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MPEG_VIDEO: {
        _id: 'video/x-mpeg';
        extensions: any;
        name: 'MPEG Video';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MS_EMBEDDED_OPEN_TYPE_FONTS: {
        _id: 'application/vnd.ms-fontobject';
        extensions: any;
        name: 'MS Embedded OpenType fonts';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_ACCESS: {
        _id: 'application/vnd.ms-access';
        extensions: any;
        name: 'Microsoft Access';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL: {
        _id: 'application/excel';
        extensions: any;
        name: 'Microsoft Excel';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL: {
        _id: 'application/vnd.ms-excel';
        extensions: any;
        name: 'Microsoft Excel';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL: {
        _id: 'application/vnd.ms-excel';
        extensions: any;
        name: 'Microsoft Excel';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL: {
        _id: 'application/x-excel';
        extensions: any;
        name: 'Microsoft Excel';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL: {
        _id: 'application/x-msexcel';
        extensions: any;
        name: 'Microsoft Excel';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL_MACRO_ENABLED: {
        _id: 'application/vnd.ms-excel.sheet.macroEnabled.12';
        extensions: any;
        name: 'Microsoft Excel (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL_OPEN_XML: {
        _id: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        extensions: any;
        name: 'Microsoft Excel (OpenXML)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL_ADDIN_MACRO_ENABLED: {
        _id: 'application/vnd.ms-excel.addin.macroEnabled.12';
        extensions: any;
        name: 'Microsoft Excel Addin (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL_BINARY_MACRO_ENABLED: {
        _id: 'application/vnd.ms-excel.sheet.binary.macroEnabled.12';
        extensions: any;
        name: 'Microsoft Excel Binary (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL_TEMPLATE_MACRO_ENABLED: {
        _id: 'application/vnd.ms-excel.template.macroEnabled.12';
        extensions: any;
        name: 'Microsoft Excel Template (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_EXCEL_TEMPLATE_OPEN_XML: {
        _id: 'application/vnd.openxmlformats-officedocument.spreadsheetml.template';
        extensions: any;
        name: 'Microsoft Excel Template (OpenXML)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_POWER_POINT: {
        _id: 'application/vnd.ms-powerpoint';
        extensions: any;
        name: 'Microsoft PowerPoint';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_POWER_POINT_OPEN_XML: {
        _id: 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
        extensions: any;
        name: 'Microsoft PowerPoint (OpenXML)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_POWER_POINT_ADDIN_MACRO_ENABLED: {
        _id: 'application/vnd.ms-word.powerpoint.addin.macroEnabled.12';
        extensions: any;
        name: 'Microsoft PowerPoint Addin (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_POWER_POINT_PRESENTATION_MACRO_ENABLED: {
        _id: 'application/vnd.ms-word.powerpoint.presentation.macroEnabled.12';
        extensions: any;
        name: 'Microsoft PowerPoint Presentation (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_POWER_POINT_SLIDESHOW_MACRO_ENABLED: {
        _id: 'application/vnd.ms-word.powerpoint.slideshow.macroEnabled.12';
        extensions: any;
        name: 'Microsoft PowerPoint Slideshow (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_POWER_POINT_SLIDESHOW_OPEN_XML: {
        _id: 'application/vnd.openxmlformats-officedocument.presentationml.slideshow';
        extensions: any;
        name: 'Microsoft PowerPoint Slideshow (OpenXML)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_POWER_POINT_TEMPLATE_MACRO_ENABLED: {
        _id: 'application/vnd.ms-word.powerpoint.template.macroEnabled.12';
        extensions: any;
        name: 'Microsoft PowerPoint Template (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_POWER_POINT_TEMPLATE_OPEN_XML: {
        _id: 'application/vnd.openxmlformats-officedocument.presentationml.template';
        extensions: any;
        name: 'Microsoft PowerPoint Template (OpenXML)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_VISIO: {
        _id: 'application/vnd.visio';
        extensions: any;
        name: 'Microsoft Visio';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_WORD: {
        _id: 'application/msword';
        extensions: any;
        name: 'Microsoft Word';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_WORD_MACRO_ENABLED: {
        _id: 'application/vnd.ms-word.document.macroEnabled.12';
        extensions: any;
        name: 'Microsoft Word (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_WORD_OPEN_XML: {
        _id: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
        extensions: any;
        name: 'Microsoft Word (OpenXML)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_WORD_TEMPLATE_MACRO_ENABLED: {
        _id: 'application/vnd.ms-word.template.macroEnabled.12';
        extensions: any;
        name: 'Microsoft Word Template (Macro Enabled)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MICROSOFT_WORD_TEMPLATE_OPEN_XML: {
        _id: 'application/vnd.openxmlformats-officedocument.wordprocessingml.template';
        extensions: any;
        name: 'Microsoft Word Template (OpenXML)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MUSICAL_INSTRUMENT_DIGITAL_INTERFACE_MIDI: {
        _id: 'audio/midi';
        extensions: any;
        name: 'Musical Instrument Digital Interface (MIDI)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      MUSICAL_INSTRUMENT_DIGITAL_INTERFACE_MIDI: {
        _id: 'audio/x-midi';
        extensions: any;
        name: 'Musical Instrument Digital Interface (MIDI)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      OGG: {
        _id: 'application/ogg';
        extensions: any;
        name: 'OGG';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      OGG_AUDIO: {
        _id: 'audio/ogg';
        extensions: any;
        name: 'OGG audio';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      OGG_VIDEO: {
        _id: 'video/ogg';
        extensions: any;
        name: 'OGG video';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      OPEN_DOCUMENT_PRESENTATION_DOCUMENT: {
        _id: 'application/vnd.oasis.opendocument.presentation';
        extensions: any;
        name: 'OpenDocument presentation document';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      OPEN_DOCUMENT_SPREADSHEET_DOCUMENT: {
        _id: 'application/vnd.oasis.opendocument.spreadsheet';
        extensions: any;
        name: 'OpenDocument spreadsheet document';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      OPEN_DOCUMENT_TEXT_DOCUMENT: {
        _id: 'application/vnd.oasis.opendocument.text';
        extensions: any;
        name: 'OpenDocument text document';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      OPEN_TYPE_FONT: {
        _id: 'font/otf';
        extensions: any;
        name: 'OpenType font';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      PORTABLE_NETWORK_GRAPHICS: {
        _id: 'image/png';
        extensions: any;
        name: 'Portable Network Graphics';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      RAR_ARCHIVE: {
        _id: 'application/x-rar-compressed';
        extensions: any;
        name: 'RAR archive';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      RICH_TEXT_FORMAT: {
        _id: 'text/richtext';
        extensions: any;
        name: 'Rich Text Format';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      RICH_TEXT_FORMAT_RTF: {
        _id: 'application/rtf';
        extensions: any;
        name: 'Rich Text Format (RTF)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      RICH_TEXT_FORMAT_RTF: {
        _id: 'application/x-rtf';
        extensions: any;
        name: 'Rich Text Format (RTF)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      SCALABLE_VECTOR_GRAPHICS_SVG: {
        _id: 'image/svg+xml';
        extensions: any;
        name: 'Scalable Vector Graphics (SVG)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      SMALL_WEB_FORMAT_SWF_OR_ADOBE_FLASH_DOCUMENT: {
        _id: 'application/x-shockwave-flash';
        extensions: any;
        name: 'Small web format (SWF) or Adobe Flash document';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      TAGGED_IMAGE_FILE_FORMAT_TIFF: {
        _id: 'image/tiff';
        extensions: any;
        name: 'Tagged Image File Format (TIFF)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      TAPE_ARCHIVE_TAR: {
        _id: 'application/x-tar';
        extensions: any;
        name: 'Tape Archive (TAR)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      TEXT_GENERALLY_ASCII_OR_ISO_8859_N: {
        _id: 'text/plain';
        extensions: any;
        name: 'Text, (generally ASCII or ISO 8859-n)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      TRUE_TYPE_FONT: {
        _id: 'font/ttf';
        extensions: any;
        name: 'TrueType Font';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WEBM_AUDIO: {
        _id: 'audio/webm';
        extensions: any;
        name: 'WEBM audio';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WEBM_VIDEO: {
        _id: 'video/webm';
        extensions: any;
        name: 'WEBM video';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WEBP_IMAGE: {
        _id: 'image/webp';
        extensions: any;
        name: 'WEBP image';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WAVEFORM_AUDIO_FORMAT: {
        _id: 'audio/wav';
        extensions: any;
        name: 'Waveform Audio Format';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WAVEFORM_AUDIO_FORMAT: {
        _id: 'audio/x-wav';
        extensions: any;
        name: 'Waveform Audio Format';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WEB_OPEN_FONT_FORMAT_WOFF: {
        _id: 'font/woff';
        extensions: any;
        name: 'Web Open Font Format (WOFF)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WEB_OPEN_FONT_FORMAT_WOFF: {
        _id: 'font/woff2';
        extensions: any;
        name: 'Web Open Font Format (WOFF)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WINDOWS_ENHANCED_METAFILE: {
        _id: 'application/emf';
        extensions: any;
        name: 'Windows Enhanced Metafile';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WINDOWS_ENHANCED_METAFILE: {
        _id: 'application/x-emf';
        extensions: any;
        name: 'Windows Enhanced Metafile';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WINDOWS_ENHANCED_METAFILE: {
        _id: 'image/x-emf';
        extensions: any;
        name: 'Windows Enhanced Metafile';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WINDOWS_ENHANCED_METAFILE: {
        _id: 'image/x-mgx-emf';
        extensions: any;
        name: 'Windows Enhanced Metafile';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WINDOWS_ENHANCED_METAFILE: {
        _id: 'image/x-xbitmap';
        extensions: any;
        name: 'Windows Enhanced Metafile';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      WINDOWS_OS_2_BITMAP_GRAPHICS: {
        _id: 'image/bmp';
        extensions: any;
        name: 'Windows OS/2 Bitmap Graphics';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      XHTML: {
        _id: 'application/xhtml+xml';
        extensions: any;
        name: 'XHTML';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      XML_IF_READABLE_FROM_CASUAL_USERS_RFC_3023_SECTION_3: {
        _id: 'text/xml';
        extensions: any;
        name: 'XML; if readable from casual users (RFC 3023, section 3)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      XML_NOT_READABLE_FROM_CASUAL_USERS_RFC_3023_SECTION_3: {
        _id: 'application/xml';
        extensions: any;
        name: 'XML; not readable from casual users (RFC 3023, section 3)';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      XUL: {
        _id: 'application/vnd.mozilla.xul+xml';
        extensions: any;
        name: 'XUL';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ZIP_ARCHIVE: {
        _id: 'application/x-compressed';
        extensions: any;
        name: 'ZIP Archive';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ZIP_ARCHIVE: {
        _id: 'multipart/x-zip';
        extensions: any;
        name: 'ZIP Archive';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ZIP_ARCHIVE: {
        _id: 'application/x-zip-compressed';
        extensions: any;
        name: 'ZIP archive';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      ZIP_ARCHIVE: {
        _id: 'application/zip';
        extensions: any;
        name: 'ZIP archive';
        unsafe: any;
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      BINARY_DATA: {
        _id: 'application/octet-stream';
        extensions: any;
        name: 'binary data';
        notes: 'Any kind of binary data';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

      I_CALENDAR_FORMAT: {
        _id: 'text/calendar';
        extensions: any;
        name: 'iCalendar format';
      } & MediaType<ObjIdType, ObjContainer, NumContainer>;

  }
  
  /**
   * Static properties for enum collection "TyrLogEventCollection"
   */
  export interface TyrLogEventCollectionEnumStatic<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {}
  
  /**
   * Static properties for enum collection "TyrLogLevelCollection"
   */
  export interface TyrLogLevelCollectionEnumStatic<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
    
      ERROR: {
        _id: 5;
        name: 'error';
        code: 'E';
        method: 'error';
      } & TyrLogLevel<ObjIdType, ObjContainer, NumContainer>;

      FATAL: {
        _id: 6;
        name: 'fatal';
        code: 'F';
        method: 'error';
      } & TyrLogLevel<ObjIdType, ObjContainer, NumContainer>;

      INFO: {
        _id: 3;
        name: 'info';
        code: 'I';
        method: 'info';
      } & TyrLogLevel<ObjIdType, ObjContainer, NumContainer>;

      LOG: {
        _id: 2;
        name: 'log';
        code: 'L';
        method: 'log';
      } & TyrLogLevel<ObjIdType, ObjContainer, NumContainer>;

      NEVER: {
        _id: 7;
        name: 'never';
        code: 'N';
      } & TyrLogLevel<ObjIdType, ObjContainer, NumContainer>;

      TRACE: {
        _id: 1;
        name: 'trace';
        code: 'T';
        method: 'trace';
      } & TyrLogLevel<ObjIdType, ObjContainer, NumContainer>;

      WARN: {
        _id: 4;
        name: 'warn';
        code: 'W';
        method: 'warn';
      } & TyrLogLevel<ObjIdType, ObjContainer, NumContainer>;

  }
  
  /**
   * Static properties for enum collection "TyrMarkupTypeCollection"
   */
  export interface TyrMarkupTypeCollectionEnumStatic<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
    
      HTML: {
        _id: 1;
        name: 'HTML';
      } & TyrMarkupType<ObjIdType, ObjContainer, NumContainer>;

      MARKDOWN: {
        _id: 2;
        name: 'Markdown';
      } & TyrMarkupType<ObjIdType, ObjContainer, NumContainer>;

      SASS: {
        _id: 3;
        name: 'SASS';
      } & TyrMarkupType<ObjIdType, ObjContainer, NumContainer>;

  }
  
  /**
   * Static properties for enum collection "TyrSchemaTypeCollection"
   */
  export interface TyrSchemaTypeCollectionEnumStatic<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
    
      FULL: {
        _id: 1;
        name: 'Full';
      } & TyrSchemaType<ObjIdType, ObjContainer, NumContainer>;

      PARTIAL: {
        _id: 2;
        name: 'Partial';
      } & TyrSchemaType<ObjIdType, ObjContainer, NumContainer>;

  }
  
  /**
   * Static properties for enum collection "UnitCollection"
   */
  export interface UnitCollectionEnumStatic<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
    
      ACRE: {
        _id: 74;
        name: 'acre';
        abbreviation: 'acre';
        formula: 'chain*furlong';
        type: any;
        system: any;
        sid: 'acre';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      AMPERE: {
        _id: 4;
        name: 'ampere';
        abbreviation: 'A';
        formula: any;
        type: any;
        system: any;
        sid: 'A';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      AMPERE_PER_METER: {
        _id: 17;
        name: 'amperePerMeter';
        abbreviation: any;
        formula: 'A/m';
        type: any;
        system: any;
        sid: 'A_m';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      AMPERE_PER_SQUARE_METER: {
        _id: 16;
        name: 'amperePerSquareMeter';
        abbreviation: any;
        formula: 'A/m2';
        type: any;
        system: any;
        sid: 'A_m2';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      BECQUEREL: {
        _id: 39;
        name: 'becquerel';
        abbreviation: 'Bq';
        formula: 's-1';
        type: any;
        system: any;
        sid: 'Bq';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      BIT: {
        _id: 103;
        name: 'bit';
        abbreviation: 'bit';
        formula: any;
        type: any;
        system: any;
        sid: 'bit';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      BYTE: {
        _id: 106;
        name: 'byte';
        abbreviation: 'B';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 8;
        sid: 'B';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      CANDELA: {
        _id: 7;
        name: 'candela';
        abbreviation: 'cd';
        formula: any;
        type: any;
        system: any;
        sid: 'cd';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      CANDELA_PER_SQUARE_METER: {
        _id: 19;
        name: 'candelaPerSquareMeter';
        abbreviation: any;
        formula: 'cd/m2';
        type: any;
        system: any;
        sid: 'cd_m2';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      CELSIUS: {
        _id: 75;
        name: 'celsius';
        abbreviation: 'degC';
        formula: any;
        type: any;
        system: any;
        baseAdditive: 273.15;
        sid: 'degC';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      CHAIN: {
        _id: 73;
        name: 'chain';
        abbreviation: 'chain';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 20.1168;
        sid: 'chain';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      COULOMB: {
        _id: 29;
        name: 'coulomb';
        abbreviation: 'C';
        formula: 's1A1';
        type: any;
        system: any;
        sid: 'C';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      COULOMB_PER_CUBIC_METER: {
        _id: 55;
        name: 'coulombPerCubicMeter';
        abbreviation: any;
        formula: 'C/m3';
        type: any;
        system: any;
        sid: 'C_m3';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      COULOMB_PER_KILOGRAM: {
        _id: 61;
        name: 'coulombPerKilogram';
        abbreviation: any;
        formula: 'C/kg';
        type: any;
        system: any;
        sid: 'C_kg';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      COULOMB_PER_SQUARE_METER: {
        _id: 56;
        name: 'coulombPerSquareMeter';
        abbreviation: any;
        formula: 'C/m2';
        type: any;
        system: any;
        sid: 'C_m2';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      CRUMB: {
        _id: 104;
        name: 'crumb';
        abbreviation: 'crumb';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 2;
        sid: 'crumb';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      CUBIC_METER: {
        _id: 10;
        name: 'cubicMeter';
        abbreviation: any;
        formula: 'm3';
        type: any;
        system: any;
        sid: 'm3';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      CUBIC_METER_PER_KILOGRAM: {
        _id: 15;
        name: 'cubicMeterPerKilogram';
        abbreviation: any;
        formula: 'm3/kg';
        type: any;
        system: any;
        sid: 'm3_kg';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      CUBIT: {
        _id: 68;
        name: 'cubit';
        abbreviation: 'cubit';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.4572;
        sid: 'cubit';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      CUP: {
        _id: 97;
        name: 'cup';
        abbreviation: 'cp';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000236588;
        sid: 'cp';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      DAY: {
        _id: 82;
        name: 'day';
        abbreviation: 'day';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 86400;
        sid: 'day';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      DOLLAR: {
        _id: 8;
        name: 'dollar';
        abbreviation: 'USD';
        formula: any;
        type: any;
        system: any;
        sid: 'USD';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      DRAM: {
        _id: 87;
        name: 'dram';
        abbreviation: 'dr';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.00177185;
        sid: 'dr';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      EURO: {
        _id: 114;
        name: 'euro';
        abbreviation: 'EUR';
        formula: any;
        type: any;
        system: any;
        sid: 'EUR';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      FAHRENHEIT: {
        _id: 76;
        name: 'fahrenheit';
        abbreviation: 'degF';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.555555556;
        baseAdditive: 255.372222222;
        sid: 'degF';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      FARAD: {
        _id: 31;
        name: 'farad';
        abbreviation: 'F';
        formula: 'C/V';
        type: any;
        system: any;
        sid: 'F';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      FARAD_PER_METER: {
        _id: 57;
        name: 'faradPerMeter';
        abbreviation: any;
        formula: 'F/m';
        type: any;
        system: any;
        sid: 'F_m';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      FLUID_OUNCE: {
        _id: 96;
        name: 'fluidOunce';
        abbreviation: 'floz';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000029574;
        sid: 'floz';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      FOOT: {
        _id: 67;
        name: 'foot';
        abbreviation: 'ft';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.3048;
        sid: 'ft';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      FURLONG: {
        _id: 70;
        name: 'furlong';
        abbreviation: 'furlong';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 201.168;
        sid: 'furlong';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      GALLON: {
        _id: 100;
        name: 'gallon';
        abbreviation: 'gal';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.003785412;
        sid: 'gal';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      GRAIN: {
        _id: 86;
        name: 'grain';
        abbreviation: 'gr';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.06479891;
        sid: 'gr';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      GRAM: {
        _id: 2;
        name: 'gram';
        abbreviation: 'g';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.001;
        sid: 'g';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      GRAY: {
        _id: 40;
        name: 'gray';
        abbreviation: 'Gy';
        formula: 'J/kg';
        type: any;
        system: any;
        sid: 'Gy';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      GRAY_PER_SECOND: {
        _id: 62;
        name: 'grayPerSecond';
        abbreviation: any;
        formula: 'Gy/s';
        type: any;
        system: any;
        sid: 'Gy_s';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      HENRY: {
        _id: 36;
        name: 'henry';
        abbreviation: 'H';
        formula: 'Wb/A';
        type: any;
        system: any;
        sid: 'H';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      HENRY_PER_METER: {
        _id: 58;
        name: 'henryPerMeter';
        abbreviation: any;
        formula: 'H/m';
        type: any;
        system: any;
        sid: 'H_m';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      HERTZ: {
        _id: 23;
        name: 'hertz';
        abbreviation: 'Hz';
        formula: 's-1';
        type: any;
        system: any;
        sid: 'Hz';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      HOUR: {
        _id: 81;
        name: 'hour';
        abbreviation: 'h';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 3600;
        sid: 'h';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      HUNDREDWEIGHT: {
        _id: 90;
        name: 'hundredweight';
        abbreviation: 'cwt';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 50.80234544;
        sid: 'cwt';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      INCH: {
        _id: 66;
        name: 'inch';
        abbreviation: 'in';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.0254;
        sid: 'in';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      JOULE: {
        _id: 27;
        name: 'joule';
        abbreviation: 'J';
        formula: 'N1m1';
        type: any;
        system: any;
        sid: 'J';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      JOULE_PER_CUBIC_METER: {
        _id: 53;
        name: 'joulePerCubicMeter';
        abbreviation: any;
        formula: 'J/m3';
        type: any;
        system: any;
        sid: 'J_m3';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      JOULE_PER_KELVIN: {
        _id: 49;
        name: 'joulePerKelvin';
        abbreviation: any;
        formula: 'J/K';
        type: any;
        system: any;
        sid: 'J_K';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      JOULE_PER_KILOGRAM: {
        _id: 51;
        name: 'joulePerKilogram';
        abbreviation: any;
        formula: 'J/kg';
        type: any;
        system: any;
        sid: 'J_kg';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      JOULE_PER_KILOGRAM_KELVIN: {
        _id: 50;
        name: 'joulePerKilogramKelvin';
        abbreviation: any;
        formula: 'J/kg1K1';
        type: any;
        system: any;
        sid: 'J_kg1K1';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      JOULE_PER_MOLE: {
        _id: 59;
        name: 'joulePerMole';
        abbreviation: any;
        formula: 'J/mol';
        type: any;
        system: any;
        sid: 'J_mol';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      JOULE_PER_MOLE_KELVIN: {
        _id: 60;
        name: 'joulePerMoleKelvin';
        abbreviation: any;
        formula: 'J/mol1K1';
        type: any;
        system: any;
        sid: 'J_mol1K1';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      KATAL: {
        _id: 42;
        name: 'katal';
        abbreviation: 'kat';
        formula: 'mol/s';
        type: any;
        system: any;
        sid: 'kat';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      KATAL_PER_CUBIC_METER: {
        _id: 65;
        name: 'katalPerCubicMeter';
        abbreviation: any;
        formula: 'kat/m3';
        type: any;
        system: any;
        sid: 'kat_m3';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      KELVIN: {
        _id: 5;
        name: 'kelvin';
        abbreviation: 'K';
        formula: any;
        type: any;
        system: any;
        sid: 'K';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      KILOGRAM_PER_CUBIC_METER: {
        _id: 14;
        name: 'kilogramPerCubicMeter';
        abbreviation: any;
        formula: 'kg/m3';
        type: any;
        system: any;
        sid: 'kg_m3';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      KNOT: {
        _id: 102;
        name: 'knot';
        abbreviation: 'knot';
        formula: 'nautmi/h';
        type: any;
        system: any;
        sid: 'knot';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      LEAGUE: {
        _id: 72;
        name: 'league';
        abbreviation: 'league';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 5556;
        sid: 'league';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      LITER: {
        _id: 93;
        name: 'liter';
        abbreviation: 'L';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.001;
        sid: 'L';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      LONG_TON: {
        _id: 92;
        name: 'longTon';
        abbreviation: 'longTon';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1016.04691;
        sid: 'longTon';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      LUMEN: {
        _id: 37;
        name: 'lumen';
        abbreviation: 'lm';
        formula: 'cd1sr1';
        type: any;
        system: any;
        sid: 'lm';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      LUX: {
        _id: 38;
        name: 'lux';
        abbreviation: 'lx';
        formula: 'lm/m2';
        type: any;
        system: any;
        sid: 'lx';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      METER: {
        _id: 1;
        name: 'meter';
        abbreviation: 'm';
        formula: any;
        type: any;
        system: any;
        sid: 'm';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      METER_PER_SECOND: {
        _id: 11;
        name: 'meterPerSecond';
        abbreviation: any;
        formula: 'm/s';
        type: any;
        system: any;
        sid: 'm_s';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      METER_PER_SECOND_SQUARED: {
        _id: 12;
        name: 'meterPerSecondSquared';
        abbreviation: any;
        formula: 'm/s2';
        type: any;
        system: any;
        sid: 'm_s2';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      MILE: {
        _id: 71;
        name: 'mile';
        abbreviation: 'mi';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1609.344;
        sid: 'mi';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      MINUTE: {
        _id: 80;
        name: 'minute';
        abbreviation: 'min';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 60;
        sid: 'min';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      MOLE: {
        _id: 6;
        name: 'mole';
        abbreviation: 'mol';
        formula: any;
        type: any;
        system: any;
        sid: 'mol';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      MOLE_PER_CUBIC_METER: {
        _id: 18;
        name: 'molePerCubicMeter';
        abbreviation: any;
        formula: 'mol/m3';
        type: any;
        system: any;
        sid: 'mol_m3';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      MONTH: {
        _id: 84;
        name: 'month';
        abbreviation: 'mon';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 2419200;
        sid: 'mon';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      NAUTICAL_MILE: {
        _id: 101;
        name: 'nauticalMile';
        abbreviation: 'nautmi';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1852;
        sid: 'nautmi';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      NEWTON: {
        _id: 24;
        name: 'newton';
        abbreviation: 'N';
        formula: 'm1kg1/s2';
        type: any;
        system: any;
        sid: 'N';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      NEWTON_METER: {
        _id: 26;
        name: 'newtonMeter';
        abbreviation: any;
        formula: 'N1m1';
        type: any;
        system: any;
        sid: 'N1m1';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      NEWTON_PER_METER: {
        _id: 45;
        name: 'newtonPerMeter';
        abbreviation: any;
        formula: 'N/m';
        type: any;
        system: any;
        sid: 'N_m';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      NIBBLE: {
        _id: 105;
        name: 'nibble';
        abbreviation: 'nibble';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 4;
        sid: 'nibble';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      OHM: {
        _id: 32;
        name: 'ohm';
        abbreviation: 'OHM';
        formula: 'V/A';
        type: any;
        system: any;
        sid: 'OHM';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      OUNCE: {
        _id: 88;
        name: 'ounce';
        abbreviation: 'oz';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.0283495;
        sid: 'oz';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PASCAL: {
        _id: 25;
        name: 'pascal';
        abbreviation: 'Pa';
        formula: 'N/m2';
        type: any;
        system: any;
        sid: 'Pa';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PASCAL_SECOND: {
        _id: 43;
        name: 'pascalSecond';
        abbreviation: any;
        formula: 'Pa1s1';
        type: any;
        system: any;
        sid: 'Pa1s1';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PINT: {
        _id: 98;
        name: 'pint';
        abbreviation: 'pt';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000473176;
        sid: 'pt';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PLANCK_AREA: {
        _id: 112;
        name: 'planckArea';
        abbreviation: any;
        formula: 'lP2';
        type: any;
        system: any;
        sid: 'lP2';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PLANCK_CHARGE: {
        _id: 110;
        name: 'planckCharge';
        abbreviation: 'qP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1.875545956e-18;
        sid: 'qP';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PLANCK_LENGTH: {
        _id: 107;
        name: 'planckLength';
        abbreviation: 'lP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1.616199e-35;
        sid: 'lP';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PLANCK_MASS: {
        _id: 108;
        name: 'planckMass';
        abbreviation: 'mP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 2.17651e-8;
        sid: 'mP';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PLANCK_TEMPERATURE: {
        _id: 111;
        name: 'planckTemperature';
        abbreviation: 'TP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1.416833e+32;
        sid: 'TP';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PLANCK_TIME: {
        _id: 109;
        name: 'planckTime';
        abbreviation: 'tP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 5.39106e-44;
        sid: 'tP';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      PLANCK_VOLUME: {
        _id: 113;
        name: 'planckVolume';
        abbreviation: any;
        formula: 'lP3';
        type: any;
        system: any;
        sid: 'lP3';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      POUND: {
        _id: 89;
        name: 'pound';
        abbreviation: 'lb';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.45359237;
        sid: 'lb';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      QUART: {
        _id: 99;
        name: 'quart';
        abbreviation: 'qt';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000946353;
        sid: 'qt';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      RADIAN: {
        _id: 21;
        name: 'radian';
        abbreviation: 'rad';
        formula: 'm/m';
        type: any;
        system: any;
        sid: 'rad';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      RADIAN_PER_SECOND: {
        _id: 46;
        name: 'radianPerSecond';
        abbreviation: any;
        formula: 'rad/s';
        type: any;
        system: any;
        sid: 'rad_s';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      RADIAN_PER_SECOND_SQUARED: {
        _id: 47;
        name: 'radianPerSecondSquared';
        abbreviation: any;
        formula: 'rad/s2';
        type: any;
        system: any;
        sid: 'rad_s2';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      RECIPROCAL_METER: {
        _id: 13;
        name: 'reciprocalMeter';
        abbreviation: any;
        formula: 'm-1';
        type: any;
        system: any;
        sid: 'm-1';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      ROD: {
        _id: 77;
        name: 'rod';
        abbreviation: 'rod';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 5.0292;
        sid: 'rod';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      SECOND: {
        _id: 3;
        name: 'second';
        abbreviation: 's';
        formula: any;
        type: any;
        system: any;
        sid: 's';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      SHORT_TON: {
        _id: 91;
        name: 'shortTon';
        abbreviation: 'shortTon';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 907.18474;
        sid: 'shortTon';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      SIEMENS: {
        _id: 33;
        name: 'siemens';
        abbreviation: 'S';
        formula: 'A/V';
        type: any;
        system: any;
        sid: 'S';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      SIEVERT: {
        _id: 41;
        name: 'sievert';
        abbreviation: 'Sv';
        formula: 'J/kg';
        type: any;
        system: any;
        sid: 'Sv';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      SQUARE_METER: {
        _id: 9;
        name: 'squareMeter';
        abbreviation: any;
        formula: 'm2';
        type: any;
        system: any;
        sid: 'm2';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      STERADIAN: {
        _id: 22;
        name: 'steradian';
        abbreviation: 'sr';
        formula: 'm2/m2';
        type: any;
        system: any;
        sid: 'sr';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      TABLESPOON: {
        _id: 95;
        name: 'tablespoon';
        abbreviation: 'tbsp';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000014787;
        sid: 'tbsp';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      TEASPOON: {
        _id: 94;
        name: 'teaspoon';
        abbreviation: 'tsp';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000004929;
        sid: 'tsp';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      TESLA: {
        _id: 35;
        name: 'tesla';
        abbreviation: 'T';
        formula: 'Wb/m2';
        type: any;
        system: any;
        sid: 'T';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      TON: {
        _id: 79;
        name: 'ton';
        abbreviation: 'ton';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1000;
        sid: 'ton';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      VOID: {
        _id: 78;
        name: 'void';
        abbreviation: 'void';
        formula: any;
        type: any;
        system: any;
        sid: 'void';
        baseMultiplier: 1;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      VOLT: {
        _id: 30;
        name: 'volt';
        abbreviation: 'V';
        formula: 'W/A';
        type: any;
        system: any;
        sid: 'V';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      VOLT_PER_METER: {
        _id: 54;
        name: 'voltPerMeter';
        abbreviation: any;
        formula: 'V/m';
        type: any;
        system: any;
        sid: 'V_m';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      WATT: {
        _id: 28;
        name: 'watt';
        abbreviation: 'W';
        formula: 'J/s';
        type: any;
        system: any;
        sid: 'W';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      WATT_PER_METER_KELVIN: {
        _id: 52;
        name: 'wattPerMeterKelvin';
        abbreviation: any;
        formula: 'W/m1K1';
        type: any;
        system: any;
        sid: 'W_m1K1';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      WATT_PER_SQUARE_METER: {
        _id: 48;
        name: 'wattPerSquareMeter';
        abbreviation: any;
        formula: 'W/m2';
        type: any;
        system: any;
        sid: 'W_m2';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      WATT_PER_SQUARE_METER_STERADIAN: {
        _id: 64;
        name: 'wattPerSquareMeterSteradian';
        abbreviation: any;
        formula: 'W/m2sr1';
        type: any;
        system: any;
        sid: 'W_m2sr1';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      WATT_PER_STERADIAN: {
        _id: 63;
        name: 'wattPerSteradian';
        abbreviation: any;
        formula: 'W/sr';
        type: any;
        system: any;
        sid: 'W_sr';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      WEBER: {
        _id: 34;
        name: 'weber';
        abbreviation: 'Wb';
        formula: 'V*s';
        type: any;
        system: any;
        sid: 'Wb';
        baseMultiplier: 1;
        units: any;
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      WEEK: {
        _id: 83;
        name: 'week';
        abbreviation: 'week';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 604800;
        sid: 'week';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      YARD: {
        _id: 69;
        name: 'yard';
        abbreviation: 'yd';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.9144;
        sid: 'yd';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

      YEAR: {
        _id: 85;
        name: 'year';
        abbreviation: 'Yr';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 31449600;
        sid: 'Yr';
      } & Unit<ObjIdType, ObjContainer, NumContainer>;

  }
  
  /**
   * Static properties for enum collection "UnitFactorCollection"
   */
  export interface UnitFactorCollectionEnumStatic<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {}
  
  /**
   * Static properties for enum collection "UnitSystemCollection"
   */
  export interface UnitSystemCollectionEnumStatic<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
    
      CURRENCY: {
        _id: 4;
        name: 'currency';
        url: 'Uses Fixer for exchange rates -- https://fixer.io';
      } & UnitSystem<ObjIdType, ObjContainer, NumContainer>;

      ENGLISH: {
        _id: 2;
        name: 'english';
        url: 'https://en.wikipedia.org/wiki/English_units';
      } & UnitSystem<ObjIdType, ObjContainer, NumContainer>;

      METRIC: {
        _id: 1;
        name: 'metric';
        url: 'https://en.wikipedia.org/wiki/International_System_of_Units';
      } & UnitSystem<ObjIdType, ObjContainer, NumContainer>;

      PLANCK: {
        _id: 3;
        name: 'planck';
        url: 'https://en.wikipedia.org/wiki/Planck_units';
      } & UnitSystem<ObjIdType, ObjContainer, NumContainer>;

  }
  
  /**
   * Static properties for enum collection "UnitTypeCollection"
   */
  export interface UnitTypeCollectionEnumStatic<ObjIdType = string, ObjContainer = Inserted<string>, NumContainer = Inserted<number>> {
    
      ABSORBED_DOSE: {
        _id: 41;
        name: 'absorbedDose';
        formula: 'l2/s2';
        note: 'Absorbed dose, specific energy (imparted), kerma.';
        components: any;
        sid: 'l2s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ABSORBED_DOSE_RATE: {
        _id: 62;
        name: 'absorbedDoseRate';
        formula: 'l2/s3';
        components: any;
        sid: 'l2s-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ACCELERATION: {
        _id: 14;
        name: 'acceleration';
        formula: 'l/s2';
        components: any;
        sid: 'l1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ACTIVITY: {
        _id: 40;
        name: 'activity';
        formula: 's-1';
        note: 'Activity (referred to a radionuclide).';
        components: any;
        sid: 's-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ANGULAR_ACCELERATION: {
        _id: 47;
        name: 'angularAcceleration';
        formula: 'l1/l1s2';
        components: any;
        sid: 'l1l-1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ANGULAR_VELOCITY: {
        _id: 46;
        name: 'angularVelocity';
        formula: 'l1/l1s1';
        components: any;
        sid: 'l1l-1s-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      AREA: {
        _id: 11;
        name: 'area';
        formula: 'l2';
        components: any;
        sid: 'l2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      BIT: {
        _id: 10;
        name: 'bit';
        formula: any;
        abbreviation: 'bit';
        normal: 'bit';
        note: 'Binary digit.';
        sid: 'bit';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      BIT_RATE: {
        _id: 66;
        name: 'bitRate';
        formula: 'bit/s';
        components: any;
        sid: 'bit1s-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      CAPACITANCE: {
        _id: 32;
        name: 'capacitance';
        formula: 's4cur2/m1l2';
        components: any;
        sid: 'cur2s4m-1l-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      CATALYTIC_ACTIVITY: {
        _id: 43;
        name: 'catalyticActivity';
        formula: 'sub/s';
        components: any;
        sid: 'sub1s-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      CATALYTIC_CONCENTRATION: {
        _id: 65;
        name: 'catalyticConcentration';
        formula: 'sub1/l3s1';
        note: 'Catalytic (activity) concentration.';
        components: any;
        sid: 'sub1s-1l-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      CONCENTRATION: {
        _id: 20;
        name: 'concentration';
        formula: 'sub/l3';
        components: any;
        sid: 'sub1l-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      CURRENCY: {
        _id: 9;
        name: 'currency';
        formula: any;
        abbreviation: 'c';
        note: '';
        sid: 'c';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      CURRENT: {
        _id: 5;
        name: 'current';
        formula: any;
        abbreviation: 'cur';
        normal: 'A';
        note: 'Electric current.';
        sid: 'cur';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      CURRENT_DENSITY: {
        _id: 18;
        name: 'currentDensity';
        formula: 'cur/l2';
        components: any;
        sid: 'cur1l-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      DENSITY: {
        _id: 16;
        name: 'density';
        formula: 'm/l3';
        components: any;
        sid: 'm1l-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      DOSE_EQUIVALENT: {
        _id: 42;
        name: 'doseEquivalent';
        formula: 'l2/s2';
        note: 'Dose equivalent, ambient dose equivalent, directional dose equivalent, personal dose equivalent, organ dose equivalent.';
        components: any;
        sid: 'l2s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      DURATION: {
        _id: 4;
        name: 'duration';
        formula: any;
        abbreviation: 's';
        normal: 's';
        note: 'Time.';
        sid: 's';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      DYNAMIC_VISCOSITY: {
        _id: 44;
        name: 'dynamicViscosity';
        formula: 'm1/l1s1';
        components: any;
        sid: 'm1l-1s-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ELECTRIC_CHARGE: {
        _id: 30;
        name: 'electricCharge';
        formula: 's1cur1';
        note: 'Electric charge, quantity of electricity.';
        components: any;
        sid: 'cur1s1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ELECTRIC_CHARGE_DENSITY: {
        _id: 55;
        name: 'electricChargeDensity';
        formula: 's1cur1/l3';
        components: any;
        sid: 'cur1s1l-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ELECTRIC_CONDUCTANCE: {
        _id: 34;
        name: 'electricConductance';
        formula: 's3cur2/l2m1';
        components: any;
        sid: 'cur2s3m-1l-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ELECTRIC_FIELD_STRENGTH: {
        _id: 54;
        name: 'electricFieldStrength';
        formula: 'l1m1/s3cur1';
        components: any;
        sid: 'l1m1cur-1s-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ELECTRIC_FLUX_DENSITY: {
        _id: 56;
        name: 'electricFluxDensity';
        formula: 's1cur1/l2';
        components: any;
        sid: 'cur1s1l-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ELECTRIC_RESISTANCE: {
        _id: 33;
        name: 'electricResistance';
        formula: 'l2m1/s3cur2';
        components: any;
        sid: 'm1l2cur-2s-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ENERGY: {
        _id: 28;
        name: 'energy';
        formula: 'l2m1/s2';
        note: 'Energy, work, quantity of heat.';
        components: any;
        sid: 'm1l2s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ENERGY_DENSITY: {
        _id: 53;
        name: 'energyDensity';
        formula: 'm1/l1s2';
        components: any;
        sid: 'm1l-1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ENTROPY: {
        _id: 49;
        name: 'entropy';
        formula: 'l2m1/s2t1';
        note: 'Heat capacity, entropy.';
        components: any;
        sid: 'm1l2t-1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      EXPOSURE: {
        _id: 61;
        name: 'exposure';
        formula: 's1cur1/m1';
        components: any;
        sid: 'cur1s1m-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      FORCE: {
        _id: 25;
        name: 'force';
        formula: 'l1m1/s2';
        components: any;
        sid: 'l1m1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      FREQUENCY: {
        _id: 24;
        name: 'frequency';
        formula: 's-1';
        components: any;
        sid: 's-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      ILLUMINANCE: {
        _id: 39;
        name: 'illuminance';
        formula: 'l2lum1/l4';
        components: any;
        sid: 'lum1l2l-4';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      INDUCTANCE: {
        _id: 37;
        name: 'inductance';
        formula: 'l2m1/s2cur2';
        components: any;
        sid: 'm1l2cur-2s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      IRRADIANCE: {
        _id: 48;
        name: 'irradiance';
        formula: 'm1/s3';
        note: 'Heat flux density, irradiance.';
        components: any;
        sid: 'm1s-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      LENGTH: {
        _id: 2;
        name: 'length';
        formula: any;
        abbreviation: 'l';
        normal: 'm';
        note: 'Length.';
        sid: 'l';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      LUMINANCE: {
        _id: 21;
        name: 'luminance';
        formula: 'lum/l2';
        components: any;
        sid: 'lum1l-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      LUMINOSITY: {
        _id: 8;
        name: 'luminosity';
        formula: any;
        abbreviation: 'lum';
        normal: 'cd';
        note: 'Luminous intensity.';
        sid: 'lum';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      LUMINOUS_FLUX: {
        _id: 38;
        name: 'luminousFlux';
        formula: 'l2lum1/l2';
        components: any;
        sid: 'lum1l2l-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      MAGNETIC_FIELD_STRENGTH: {
        _id: 19;
        name: 'magneticFieldStrength';
        formula: 'cur/l';
        components: any;
        sid: 'cur1l-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      MAGNETIC_FLUX: {
        _id: 35;
        name: 'magneticFlux';
        formula: 'l2m1/s2cur1';
        components: any;
        sid: 'm1l2cur-1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      MAGNETIC_FLUX_DENSITY: {
        _id: 36;
        name: 'magneticFluxDensity';
        formula: 'm/s2cur1';
        components: any;
        sid: 'm1cur-1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      MASS: {
        _id: 3;
        name: 'mass';
        formula: any;
        abbreviation: 'm';
        normal: 'kg';
        note: 'Mass.';
        sid: 'm';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      MOLAR_ENERGY: {
        _id: 59;
        name: 'molarEnergy';
        formula: 'l2m1/s2sub1';
        components: any;
        sid: 'm1l2sub-1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      MOLAR_ENTROPY: {
        _id: 60;
        name: 'molarEntropy';
        formula: 'l2m1/s2t1sub1';
        note: 'Molar entropy, molar heat capacity.';
        components: any;
        sid: 'm1l2sub-1t-1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      MOMENT_OF_FORCE: {
        _id: 27;
        name: 'momentOfForce';
        formula: 'l2m1/s2';
        components: any;
        sid: 'm1l2s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      NONE: {
        _id: 1;
        name: 'none';
        formula: any;
        abbreviation: 'none';
        normal: 'none';
        note: 'No units.';
        sid: 'none';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      PERMEABILITY: {
        _id: 58;
        name: 'permeability';
        formula: 'l1m1/s2cur2';
        components: any;
        sid: 'l1m1cur-2s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      PERMITTIVITY: {
        _id: 57;
        name: 'permittivity';
        formula: 's4cur2/m1l3';
        components: any;
        sid: 'cur2s4m-1l-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      PLANE_ANGLE: {
        _id: 22;
        name: 'planeAngle';
        formula: 'l/l';
        components: any;
        sid: 'l1l-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      POWER: {
        _id: 29;
        name: 'power';
        formula: 'l2m1/s3';
        note: 'Power, radiant flux.';
        components: any;
        sid: 'm1l2s-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      PRESSURE: {
        _id: 26;
        name: 'pressure';
        formula: 'm1/l1s2';
        note: 'Pressure, stress.';
        components: any;
        sid: 'm1l-1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      RADIANCE: {
        _id: 64;
        name: 'radiance';
        formula: 'l2m1/l2s3';
        components: any;
        sid: 'm1l2l-2s-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      RADIANT_INTENSITY: {
        _id: 63;
        name: 'radiantIntensity';
        formula: 'l4m1/l2s3';
        components: any;
        sid: 'm1l4l-2s-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      SOLID_ANGLE: {
        _id: 23;
        name: 'solidAngle';
        formula: 'l2/l2';
        components: any;
        sid: 'l2l-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      SPECIFIC_ENERGY: {
        _id: 51;
        name: 'specificEnergy';
        formula: 'l2/s2';
        components: any;
        sid: 'l2s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      SPECIFIC_ENTROPY: {
        _id: 50;
        name: 'specificEntropy';
        formula: 'l2/s2t1';
        note: 'Specific heat capacity, specific entropy.';
        components: any;
        sid: 'l2t-1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      SPECIFIC_VOLUME: {
        _id: 17;
        name: 'specificVolume';
        formula: 'l3/m';
        components: any;
        sid: 'l3m-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      SUBSTANCE: {
        _id: 7;
        name: 'substance';
        formula: any;
        abbreviation: 'sub';
        normal: 'mol';
        note: 'Amount of substance.';
        sid: 'sub';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      SURFACE_TENSION: {
        _id: 45;
        name: 'surfaceTension';
        formula: 'm1/s2';
        components: any;
        sid: 'm1s-2';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      TEMPERATURE: {
        _id: 6;
        name: 'temperature';
        formula: any;
        abbreviation: 't';
        normal: 'K';
        note: 'Thermodynamic temperature.';
        sid: 't';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      THERMAL_CONDUCTIVITY: {
        _id: 52;
        name: 'thermalConductivity';
        formula: 'l1m1/s3t1';
        components: any;
        sid: 'l1m1t-1s-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      VELOCITY: {
        _id: 13;
        name: 'velocity';
        formula: 'l/s';
        components: any;
        sid: 'l1s-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      VOLTAGE: {
        _id: 31;
        name: 'voltage';
        formula: 'l2m1/s3cur1';
        note: 'Voltage, electric tension, electric potential difference, electromotive force.';
        components: any;
        sid: 'm1l2cur-1s-3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      VOLUME: {
        _id: 12;
        name: 'volume';
        formula: 'l3';
        components: any;
        sid: 'l3';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

      WAVE_NUMBER: {
        _id: 15;
        name: 'waveNumber';
        formula: 'l-1';
        components: any;
        sid: 'l-1';
      } & UnitType<ObjIdType, ObjContainer, NumContainer>;

  }
  
    
    /**
     * Type alias for enum id values in "mediaType" collection
     */
    export type MediaTypeId =
      'application/ecmascript'
     |'application/emf'
     |'application/epub+zip'
     |'application/excel'
     |'application/java-archive'
     |'application/javascript'
     |'application/json'
     |'application/mp4'
     |'application/msword'
     |'application/octet-stream'
     |'application/ogg'
     |'application/pdf'
     |'application/rtf'
     |'application/vnd.amazon.ebook'
     |'application/vnd.apple.installer+xml'
     |'application/vnd.mozilla.xul+xml'
     |'application/vnd.ms-access'
     |'application/vnd.ms-excel'
     |'application/vnd.ms-excel'
     |'application/vnd.ms-excel.addin.macroEnabled.12'
     |'application/vnd.ms-excel.sheet.binary.macroEnabled.12'
     |'application/vnd.ms-excel.sheet.macroEnabled.12'
     |'application/vnd.ms-excel.template.macroEnabled.12'
     |'application/vnd.ms-fontobject'
     |'application/vnd.ms-powerpoint'
     |'application/vnd.ms-word.document.macroEnabled.12'
     |'application/vnd.ms-word.powerpoint.addin.macroEnabled.12'
     |'application/vnd.ms-word.powerpoint.presentation.macroEnabled.12'
     |'application/vnd.ms-word.powerpoint.slideshow.macroEnabled.12'
     |'application/vnd.ms-word.powerpoint.template.macroEnabled.12'
     |'application/vnd.ms-word.template.macroEnabled.12'
     |'application/vnd.oasis.opendocument.presentation'
     |'application/vnd.oasis.opendocument.spreadsheet'
     |'application/vnd.oasis.opendocument.text'
     |'application/vnd.openxmlformats-officedocument.presentationml.presentation'
     |'application/vnd.openxmlformats-officedocument.presentationml.slideshow'
     |'application/vnd.openxmlformats-officedocument.presentationml.template'
     |'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
     |'application/vnd.openxmlformats-officedocument.spreadsheetml.template'
     |'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
     |'application/vnd.openxmlformats-officedocument.wordprocessingml.template'
     |'application/vnd.visio'
     |'application/x-7z-compressed'
     |'application/x-abiword'
     |'application/x-bzip'
     |'application/x-bzip2'
     |'application/x-compressed'
     |'application/x-csh'
     |'application/x-emf'
     |'application/x-excel'
     |'application/x-freearc'
     |'application/x-iwork-keynote-sffkey'
     |'application/x-iwork-numbers-sffnumbers'
     |'application/x-iwork-pages-sffpages'
     |'application/x-javascript'
     |'application/x-msexcel'
     |'application/x-rar-compressed'
     |'application/x-rtf'
     |'application/x-sh'
     |'application/x-shockwave-flash'
     |'application/x-tar'
     |'application/x-zip-compressed'
     |'application/xhtml+xml'
     |'application/xml'
     |'application/zip'
     |'audio/3gpp'
     |'audio/3gpp2'
     |'audio/aac'
     |'audio/midi'
     |'audio/mpeg'
     |'audio/mpeg3'
     |'audio/ogg'
     |'audio/wav'
     |'audio/webm'
     |'audio/x-midi'
     |'audio/x-mpeg-3'
     |'audio/x-wav'
     |'font/otf'
     |'font/ttf'
     |'font/woff'
     |'font/woff2'
     |'image/bmp'
     |'image/gif'
     |'image/jpeg'
     |'image/png'
     |'image/svg+xml'
     |'image/tiff'
     |'image/vnd.microsoft.icon'
     |'image/webp'
     |'image/x-emf'
     |'image/x-icon'
     |'image/x-mgx-emf'
     |'image/x-xbitmap'
     |'multipart/x-zip'
     |'text/calendar'
     |'text/css'
     |'text/csv'
     |'text/ecmascript'
     |'text/html'
     |'text/javascript'
     |'text/plain'
     |'text/richtext'
     |'text/xml'
     |'video/3gpp'
     |'video/3gpp2'
     |'video/avi'
     |'video/mp4'
     |'video/mpeg'
     |'video/msvideo'
     |'video/ogg'
     |'video/quicktime'
     |'video/webm'
     |'video/x-mpeg'
     |'video/x-msvideo';
    
    /**
     * Type alias for enum id values in "tyrLogEvent" collection
     */
    export type TyrLogEventId =
      'db'
     |'historical'
     |'http'
     |'subscription';
    
    /**
     * Type alias for enum id values in "tyrLogLevel" collection
     */
    export type TyrLogLevelId =
      1
     |2
     |3
     |4
     |5
     |6
     |7;
    
    /**
     * Type alias for enum id values in "tyrMarkupType" collection
     */
    export type TyrMarkupTypeId =
      1
     |2
     |3;
    
    /**
     * Type alias for enum id values in "tyrSchemaType" collection
     */
    export type TyrSchemaTypeId =
      1
     |2;
    
    /**
     * Type alias for enum id values in "unit" collection
     */
    export type UnitId =
      1
     |2
     |3
     |4
     |5
     |6
     |7
     |8
     |9
     |10
     |11
     |12
     |13
     |14
     |15
     |16
     |17
     |18
     |19
     |21
     |22
     |23
     |24
     |25
     |26
     |27
     |28
     |29
     |30
     |31
     |32
     |33
     |34
     |35
     |36
     |37
     |38
     |39
     |40
     |41
     |42
     |43
     |45
     |46
     |47
     |48
     |49
     |50
     |51
     |52
     |53
     |54
     |55
     |56
     |57
     |58
     |59
     |60
     |61
     |62
     |63
     |64
     |65
     |66
     |67
     |68
     |69
     |70
     |71
     |72
     |73
     |74
     |75
     |76
     |77
     |78
     |79
     |80
     |81
     |82
     |83
     |84
     |85
     |86
     |87
     |88
     |89
     |90
     |91
     |92
     |93
     |94
     |95
     |96
     |97
     |98
     |99
     |100
     |101
     |102
     |103
     |104
     |105
     |106
     |107
     |108
     |109
     |110
     |111
     |112
     |113
     |114;
    
    /**
     * Type alias for enum id values in "unitFactor" collection
     */
    export type UnitFactorId =
      1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1;
    
    /**
     * Type alias for enum id values in "unitSystem" collection
     */
    export type UnitSystemId =
      1
     |2
     |3
     |4;
    
    /**
     * Type alias for enum id values in "unitType" collection
     */
    export type UnitTypeId =
      1
     |2
     |3
     |4
     |5
     |6
     |7
     |8
     |9
     |10
     |11
     |12
     |13
     |14
     |15
     |16
     |17
     |18
     |19
     |20
     |21
     |22
     |23
     |24
     |25
     |26
     |27
     |28
     |29
     |30
     |31
     |32
     |33
     |34
     |35
     |36
     |37
     |38
     |39
     |40
     |41
     |42
     |43
     |44
     |45
     |46
     |47
     |48
     |49
     |50
     |51
     |52
     |53
     |54
     |55
     |56
     |57
     |58
     |59
     |60
     |61
     |62
     |63
     |64
     |65
     |66;
    
    /**
     * Add lookup properties to Tyr.byName with extended interfaces
     */
    export interface CollectionsByName<IdType = string> {
      mediaType: MediaTypeCollection<IdType>;
      tyrExchangeRate: TyrExchangeRateCollection<IdType>;
      tyrInstance: TyrInstanceCollection<IdType>;
      tyrLog: TyrLogCollection<IdType>;
      tyrLogEvent: TyrLogEventCollection<IdType>;
      tyrLogLevel: TyrLogLevelCollection<IdType>;
      tyrMarkupType: TyrMarkupTypeCollection<IdType>;
      tyrMigrationStatus: TyrMigrationStatusCollection<IdType>;
      tyrPage: TyrPageCollection<IdType>;
      tyrSchema: TyrSchemaCollection<IdType>;
      tyrSchemaType: TyrSchemaTypeCollection<IdType>;
      tyrSubscription: TyrSubscriptionCollection<IdType>;
      tyrTableConfig: TyrTableConfigCollection<IdType>;
      tyrUserAgent: TyrUserAgentCollection<IdType>;
      unit: UnitCollection<IdType>;
      unitFactor: UnitFactorCollection<IdType>;
      unitSystem: UnitSystemCollection<IdType>;
      unitType: UnitTypeCollection<IdType>;
    }

    /**
     * Add lookup properties to Tyr.collections with extended interfaces
     */
    export interface CollectionsByClassName<IdType = string> {
      MediaType: MediaTypeCollection<IdType>;
      TyrExchangeRate: TyrExchangeRateCollection<IdType>;
      TyrInstance: TyrInstanceCollection<IdType>;
      TyrLog: TyrLogCollection<IdType>;
      TyrLogEvent: TyrLogEventCollection<IdType>;
      TyrLogLevel: TyrLogLevelCollection<IdType>;
      TyrMarkupType: TyrMarkupTypeCollection<IdType>;
      TyrMigrationStatus: TyrMigrationStatusCollection<IdType>;
      TyrPage: TyrPageCollection<IdType>;
      TyrSchema: TyrSchemaCollection<IdType>;
      TyrSchemaType: TyrSchemaTypeCollection<IdType>;
      TyrSubscription: TyrSubscriptionCollection<IdType>;
      TyrTableConfig: TyrTableConfigCollection<IdType>;
      TyrUserAgent: TyrUserAgentCollection<IdType>;
      Unit: UnitCollection<IdType>;
      UnitFactor: UnitFactorCollection<IdType>;
      UnitSystem: UnitSystemCollection<IdType>;
      UnitType: UnitTypeCollection<IdType>;
    }

    /**
     * Add lookup properties to Tyr.byId with extended interfaces
     */
    export interface CollectionsById<IdType = string> {
      _mt: MediaTypeCollection<IdType>;
      _u5: TyrExchangeRateCollection<IdType>;
      _t2: TyrInstanceCollection<IdType>;
      _l0: TyrLogCollection<IdType>;
      _l2: TyrLogEventCollection<IdType>;
      _l1: TyrLogLevelCollection<IdType>;
      _p1: TyrMarkupTypeCollection<IdType>;
      _m1: TyrMigrationStatusCollection<IdType>;
      _p0: TyrPageCollection<IdType>;
      _t1: TyrSchemaCollection<IdType>;
      _t0: TyrSchemaTypeCollection<IdType>;
      _t3: TyrSubscriptionCollection<IdType>;
      _tc: TyrTableConfigCollection<IdType>;
      _u4: TyrUserAgentCollection<IdType>;
      _u2: UnitCollection<IdType>;
      _u3: UnitFactorCollection<IdType>;
      _u0: UnitSystemCollection<IdType>;
      _u1: UnitTypeCollection<IdType>;
    }
  

    /**
     * Union type of all current collection names
     */
    export type CollectionName =
      'mediaType'
     |'tyrExchangeRate'
     |'tyrInstance'
     |'tyrLog'
     |'tyrLogEvent'
     |'tyrLogLevel'
     |'tyrMarkupType'
     |'tyrMigrationStatus'
     |'tyrPage'
     |'tyrSchema'
     |'tyrSchemaType'
     |'tyrSubscription'
     |'tyrTableConfig'
     |'tyrUserAgent'
     |'unit'
     |'unitFactor'
     |'unitSystem'
     |'unitType';

    /**
     * Union type of all current collection ids
     */
    export type CollectionId =
      '_l0'
     |'_l1'
     |'_l2'
     |'_m1'
     |'_mt'
     |'_p0'
     |'_p1'
     |'_t0'
     |'_t1'
     |'_t2'
     |'_t3'
     |'_tc'
     |'_u0'
     |'_u1'
     |'_u2'
     |'_u3'
     |'_u4'
     |'_u5';
    
  }

}
